"""
Reports & Export Page - Phase 4 Final Step
UI cho vi·ªác t·∫°o v√† export b√°o c√°o PDF v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
"""

import streamlit as st
import time
from datetime import datetime
import io
import base64
from ..core.reports_export import create_pdf_report
import pandas as pd
import plotly.express as px
from src.shared.ui_utils import load_shared_styles
load_shared_styles()



class CustomerSegmentationReports:
    """Page cu·ªëi c√πng - T·∫°o v√† export b√°o c√°o ho√†n ch·ªânh"""
    
    def __init__(self):
        self.setup_session_state()
    
    def setup_session_state(self):
        """Initialize session state for reports"""
        if 'report_generated' not in st.session_state:
            st.session_state.report_generated = False
        if 'report_buffer' not in st.session_state:
            st.session_state.report_buffer = None
        if 'report_filename' not in st.session_state:
            st.session_state.report_filename = None

    def render(self):
        """Render reports & export page"""
        
        if not self._check_prerequisites():
            return
        
        # Modern Glass CSS styling
        st.markdown("""
        <style>
        .glass-container {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            padding: 2rem;
            margin: 1rem 0;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }
        
        .glass-header {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.1));
            backdrop-filter: blur(15px);
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 3rem 2rem;
            margin-bottom: 2rem;
            text-align: center;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);
        }
        
        .glass-success {
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.3), rgba(139, 195, 74, 0.2));
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(76, 175, 80, 0.3);
            padding: 2rem;
            margin: 1rem 0;
            text-align: center;
            box-shadow: 0 8px 32px 0 rgba(76, 175, 80, 0.1);
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(8px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1.5rem;
            margin: 1rem 0;
            box-shadow: 0 4px 16px 0 rgba(31, 38, 135, 0.15);
        }
        
        .glass-metric {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(5px);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.25);
            padding: 1rem;
            text-align: center;
            margin: 0.5rem 0;
        }
        
        .progress-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(8px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            padding: 1.5rem;
            margin: 1rem 0;
        }
        
        .stButton > button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 0.8rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px 0 rgba(31, 38, 135, 0.2);
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px 0 rgba(31, 38, 135, 0.3);
        }
        
        .stDownloadButton > button {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 1rem 2rem;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .step-item {
            display: flex;
            align-items: center;
            margin: 0.8rem 0;
            padding: 0.8rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            border-left: 4px solid #4CAF50;
        }
        
        h1, h2, h3 {
            color: #2c3e50;
            font-weight: 700;
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .metric-label {
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        </style>
        """, unsafe_allow_html=True)

        self._render_completion_header()
        self._render_workflow_summary()
        self._render_report_preview()
        self._render_report_generation()

    def _check_prerequisites(self):
        """Check if all previous phases are completed"""
        
        required_data = {
            'final_model_results': 'K·∫øt qu·∫£ ph√¢n c·ª•m',
            'cluster_profiles': 'Ph√¢n t√≠ch cluster',
            'ai_personas': 'AI Personas'
        }
        
        missing_data = []
        for key, description in required_data.items():
            if not st.session_state.get(key):
                missing_data.append(description)
        
        if missing_data:
            st.markdown('<div class="glass-header"><h1>B√°o C√°o & Export</h1><p>T·∫°o b√°o c√°o PDF ho√†n ch·ªânh v·ªõi t·∫•t c·∫£ insights</p></div>', unsafe_allow_html=True)
            
            st.markdown('<div class="glass-container">', unsafe_allow_html=True)
            st.warning("C·∫ßn ho√†n th√†nh c√°c b∆∞·ªõc tr∆∞·ªõc ƒë·ªÉ t·∫°o b√°o c√°o")
            st.markdown("**D·ªØ li·ªáu c√≤n thi·∫øu:**")
            for item in missing_data:
                st.write(f"‚Ä¢ {item}")
            st.info("**H∆∞·ªõng d·∫´n:** Vui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc t·ª´ Data Preparation ƒë·∫øn Customer Insights")
            st.markdown('</div>', unsafe_allow_html=True)
            
            return False
        
        return True

    def _render_completion_header(self):
        """Render completion celebration header"""
        
        st.markdown('''
        <div class="glass-success">
            <h1>HO√ÄN TH√ÄNH PH√ÇN T√çCH KH√ÅCH H√ÄNG</h1>
            <h2>Customer Insights Analysis Complete</h2>
            <p style="font-size: 1.2rem; margin-top: 1rem;">B·∫°n ƒë√£ th√†nh c√¥ng ph√¢n t√≠ch v√† t·∫°o insights cho d·ªØ li·ªáu kh√°ch h√†ng</p>
        </div>
        ''', unsafe_allow_html=True)

    def _render_workflow_summary(self):
        """Render summary of completed workflow"""
        
        st.subheader("T·ªïng K·∫øt Quy Tr√¨nh")
        
        workflow_steps = [
            ("Data Preparation", "Ho√†n th√†nh"),
            ("Feature Engineering", "Ho√†n th√†nh"), 
            ("Clustering Analysis", "Ho√†n th√†nh"),
            ("AI Customer Insights", "Ho√†n th√†nh"),
            ("Reports & Export", "ƒêang th·ª±c hi·ªán")
        ]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="glass-card">', unsafe_allow_html=True)
            st.markdown("**C√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh:**")
            for step, status in workflow_steps:
                status_icon = "‚úÖ" if status == "Ho√†n th√†nh" else "üîÑ"
                st.markdown(f'<div class="step-item">{status_icon} {step}: {status}</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="glass-card">', unsafe_allow_html=True)
            if st.session_state.get('cluster_profiles'):
                cluster_profiles = st.session_state.cluster_profiles
                total_customers = sum(profile['size_info']['count'] for profile in cluster_profiles.values())
                num_clusters = len(cluster_profiles)
                
                st.markdown("**K·∫øt qu·∫£ ch√≠nh:**")
                
                st.markdown(f'''
                <div class="glass-metric">
                    <div class="metric-value">{total_customers:,}</div>
                    <div class="metric-label">T·ªïng kh√°ch h√†ng ph√¢n t√≠ch</div>
                </div>
                ''', unsafe_allow_html=True)
                
                st.markdown(f'''
                <div class="glass-metric">
                    <div class="metric-value">{num_clusters}</div>
                    <div class="metric-label">S·ªë ph√¢n kh√∫c x√°c ƒë·ªãnh</div>
                </div>
                ''', unsafe_allow_html=True)
                
                st.markdown(f'''
                <div class="glass-metric">
                    <div class="metric-value">{len(st.session_state.get("ai_personas", {}))}</div>
                    <div class="metric-label">AI Personas ƒë∆∞·ª£c t·∫°o</div>
                </div>
                ''', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)

    def _render_report_preview(self):
        """Render preview of what will be in the report"""
        
        st.subheader("N·ªôi Dung B√°o C√°o PDF")
        
        preview_content = [
            "T√≥m t·∫Øt ƒëi·ªÅu h√†nh - Key metrics v√† insights ch√≠nh",
            "T·ªïng quan d·ªØ li·ªáu - Th√¥ng tin dataset v√† ph∆∞∆°ng ph√°p ph√¢n t√≠ch",
            "Ph√¢n t√≠ch chi ti·∫øt c√°c ph√¢n kh√∫c - ƒê·∫∑c ƒëi·ªÉm t·ª´ng cluster",
            "Bi·ªÉu ƒë·ªì tr·ª±c quan - Visual clusters v√† distributions",
            "AI Marketing Personas - Personas ƒë∆∞·ª£c t·∫°o b·ªüi AI",
            "Chi·∫øn l∆∞·ª£c Marketing Campaigns - Campaign plans c·ª• th·ªÉ",
            "Khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c - Actionable recommendations"
        ]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="glass-card">', unsafe_allow_html=True)
            st.markdown("**B√°o c√°o s·∫Ω bao g·ªìm:**")
            for item in preview_content[:4]:
                st.markdown(f"‚Ä¢ {item}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="glass-card">', unsafe_allow_html=True)
            st.markdown("**V√† th√™m:**")
            for item in preview_content[4:]:
                st.markdown(f"‚Ä¢ {item}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('''
        <div class="glass-container">
            <h4>Th√¥ng s·ªë k·ªπ thu·∫≠t b√°o c√°o:</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-top: 1rem;">
                <div>‚úÖ Format: PDF Professional</div>
                <div>‚úÖ Font: H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß ti·∫øng Vi·ªát</div>
                <div>‚úÖ Charts: High-resolution visualizations</div>
                <div>‚úÖ Layout: Business-ready formatting</div>
                <div>‚úÖ Size: Optimized for sharing</div>
            </div>
        </div>
        ''', unsafe_allow_html=True)

    def _render_report_generation(self):
        """Render report generation section"""
        
        st.subheader("T·∫°o B√°o C√°o PDF")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if not st.session_state.report_generated:
                if st.button("T·∫°o B√°o C√°o PDF Ho√†n Ch·ªânh", 
                           type="primary", 
                           use_container_width=True,
                           key="generate_report"):
                    self._generate_pdf_report()
            
            else:
                if st.session_state.report_buffer:
                    current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"customer_insights_report_{current_time}.pdf"
                    
                    st.download_button(
                        label="T·∫£i Xu·ªëng B√°o C√°o PDF",
                        data=st.session_state.report_buffer.getvalue(),
                        file_name=filename,
                        mime="application/pdf",
                        type="primary",
                        use_container_width=True
                    )
                    
                    st.success("B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                    
                    if st.button("T·∫°o B√°o C√°o M·ªõi", 
                               type="secondary", 
                               use_container_width=True):
                        st.session_state.report_generated = False
                        st.session_state.report_buffer = None
                        st.rerun()
        
        if st.session_state.report_generated:
            st.markdown("---")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown('''
                <div class="glass-card">
                    <h4>Chia s·∫ª b√°o c√°o</h4>
                    <p>B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† c√≥ th·ªÉ:</p>
                    <ul>
                        <li>Chia s·∫ª v·ªõi team marketing</li>
                        <li>Tr√¨nh b√†y v·ªõi management</li>
                        <li>S·ª≠ d·ª•ng cho planning meetings</li>
                        <li>Archive cho tham kh·∫£o sau n√†y</li>
                    </ul>
                </div>
                ''', unsafe_allow_html=True)
            
            with col2:
                st.markdown('''
                <div class="glass-card">
                    <h4>C·∫≠p nh·∫≠t b√°o c√°o</h4>
                    <p>ƒê·ªÉ c√≥ b√°o c√°o m·ªõi nh·∫•t:</p>
                    <ul>
                        <li>Upload d·ªØ li·ªáu m·ªõi</li>
                        <li>Ch·∫°y l·∫°i to√†n b·ªô workflow</li>
                        <li>T·∫°o b√°o c√°o m·ªõi v·ªõi insights c·∫≠p nh·∫≠t</li>
                        <li>So s√°nh v·ªõi b√°o c√°o tr∆∞·ªõc ƒë√≥</li>
                    </ul>
                </div>
                ''', unsafe_allow_html=True)
        
        if not st.session_state.report_generated:
            self._show_quick_insights()

    def _generate_pdf_report(self):
        """Generate the actual PDF report"""
        
        try:
            st.markdown('<div class="progress-section">', unsafe_allow_html=True)
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            status_text.text("Thu th·∫≠p d·ªØ li·ªáu...")
            progress_bar.progress(20)
            time.sleep(1)
            
            final_model_results = st.session_state.get('final_model_results')
            cluster_profiles = st.session_state.get('cluster_profiles')
            ai_personas = st.session_state.get('ai_personas')
            ai_campaigns = st.session_state.get('ai_campaigns')
            
            status_text.text("T·∫°o bi·ªÉu ƒë·ªì...")
            progress_bar.progress(40)
            time.sleep(1)
            
            status_text.text("T·∫°o file PDF...")
            progress_bar.progress(60)
            time.sleep(1)
            
            pdf_buffer = create_pdf_report(
                final_model_results,
                cluster_profiles, 
                ai_personas,
                ai_campaigns
            )
            
            status_text.text("Ho√†n t·∫•t b√°o c√°o...")
            progress_bar.progress(100)
            time.sleep(1)
            
            st.session_state.report_buffer = pdf_buffer
            st.session_state.report_generated = True
            
            progress_bar.empty()
            status_text.empty()
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.success("B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            st.balloons()
            
            time.sleep(2)
            st.rerun()
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
            st.info("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o")

    def _show_quick_insights(self):
        """Show quick insights while user waits"""
        
        st.markdown("---")
        st.subheader("Quick Insights")
        
        if st.session_state.get('cluster_profiles'):
            cluster_profiles = st.session_state.cluster_profiles
            
            cluster_data = []
            for cluster_key, profile in cluster_profiles.items():
                cluster_data.append({
                    'Cluster': f"Ph√¢n kh√∫c {profile['cluster_id']}",
                    'Customers': profile['size_info']['count'],
                    'Percentage': profile['size_info']['percentage']
                })
            
            df = pd.DataFrame(cluster_data)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown('<div class="glass-card">', unsafe_allow_html=True)
                fig_pie = px.pie(
                    df, 
                    values='Customers', 
                    names='Cluster',
                    title="Ph√¢n b·ªë kh√°ch h√†ng theo ph√¢n kh√∫c"
                )
                st.plotly_chart(fig_pie, use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown('<div class="glass-card">', unsafe_allow_html=True)
                fig_bar = px.bar(
                    df,
                    x='Cluster', 
                    y='Customers',
                    title="S·ªë l∆∞·ª£ng kh√°ch h√†ng m·ªói ph√¢n kh√∫c",
                    color='Customers',
                    color_continuous_scale='viridis'
                )
                st.plotly_chart(fig_bar, use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)


def create_reports_export_page():
    """Factory function to create reports export page"""
    return CustomerSegmentationReports()